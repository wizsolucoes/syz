//// App Mixins ////

/**
* Aplica a propriedade desejada para todos os prefixos dos browsers
*
* @param {string} $property - Propriedade que deseja aplicar os prefixos
* @param {string} $value - Valor da propriedade a ser aplicado o prefixo
*/

@mixin vendor-prefixes($property, $value) {
    #{$property}: $value;
    -webkit-#{$property}: $value;
    -moz-#{$property}: $value;
    -ms-#{$property}: $value;
    -o-#{$property}: $value;
}

/**
  * Define o alinhamento vertical centralizado para o elemento
  *
  * @param {string} $horizontal - Valor ja definido como true para fazer
  * o alinhamento horizontal do elemento.
  * @param {string} $vertical - Valor ja definido como true para fazer
  * o alinhamento vertical do elemento.
  * Ex alinhamento horizontal e vertical: @include centerer;
  * Ex alinhamento horizontal: @include centerer(true, false);
  * Ex alinhamento vertical: @include centerer(false, true);
  */

@mixin centerer($horizontal: true, $vertical: true) {
    // position: absolute;
    @if ($horizontal and $vertical) {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    } @else if ($horizontal) {
        left: 50%;
        transform: translate(-50%, 0);
    } @else if ($vertical) {
        top: 50%;
        transform: translate(0, -50%);
    }
}

/**
  * Define o background-image cover
  *
  * @param {string} $img-url - Define o caminho da imagem
  * @param {string} $background-top - Valor ja definido como center para fazer
  * o alinhamento vertical do elemento.
  * @param {string} $background-left - Valor ja definido como center para fazer
  * o alinhamento horizontal do elemento.
  */

@mixin cover-bg(
    $img-url,
    $background-top: 'center',
    $background-left: 'center'
) {
    background-image: url($img-url);
    background-repeat: no-repeat;
    background-position: unquote($background-top) unquote($background-left);
    @include vendor-prefixes(background-size, cover);
}

/**
  * Define as bordas arredondadas de um elemento
  *
  * @param {string} $radius - Texto com os valores da borda. Pode ser
  * o valor geral ou valores especificos para cada borda.
  */

@mixin border-radius($radius) {
    @include vendor-prefixes(border-radius, $radius);
}

@mixin border-radius4(
    $top-start,
    $top-end: $top-start,
    $bottom-end: $top-start,
    $bottom-start: $top-end
) {
    @if $top-start ==
        $top-end and
        $top-start ==
        $bottom-end and
        $top-start ==
        $bottom-start
    {
        @include multi-dir() {
            border-radius: $top-start;
        }
    } @else {
        @include ltr() {
            border-top-left-radius: $top-start;
            border-top-right-radius: $top-end;
            border-bottom-right-radius: $bottom-end;
            border-bottom-left-radius: $bottom-start;
        }

        @include rtl() {
            border-top-left-radius: $top-end;
            border-top-right-radius: $top-start;
            border-bottom-right-radius: $bottom-start;
            border-bottom-left-radius: $bottom-end;
        }
    }
}

/**
  * Aplica efeito de transicao no elemento
  * @param {string} $args - Argumentos que serão passados para o efeito de transicao
  */

@mixin transition($args...) {
    @include vendor-prefixes(transition, $args);
}

/**
  * Aplica opacidade no elemento
  * @param {string} $opacity - Valor da opacidade (Ex: 0.5)
  */

@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}

/**
  * Cria um circulo perfeito com texto e item
  * @param {string} $width - Largura do circulo
  * @param {string} $line-height - Altura da linha para alinhamento do ícone
  * @param {string} $color-inner - Cor do círculo
  * @param {string} $color-item - Cor do ícone
  */

@mixin circle-item($width, $line-height, $color-inner, $color-item) {
    font-size: $width/2;
    font-weight: 900;
    background: $color-inner;
    @include border-radius($width/2);
    width: $width;
    height: $width;
    line-height: $line-height;
    color: $color-item;
    text-align: center;
}

/**
  * Facilita a criação de keyframes, com menos linhas de código
  * @param {string} $animation-name - Nome da animação (Ex: slide)
  */

@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }
    @keyframes #{$animation-name} {
        @content;
    }
}

/**
  * Facilita a criação de animações, com menos linhas de código
  * @param {string} $str - Argumentos que serão passados para o efeito de animação
  */

@mixin animation($str) {
    @include vendor-prefixes(animation, #{$str});
    -webkit-animation: #{$str};
    -moz-animation: #{$str};
    -ms-animation: #{$str};
    -o-animation: #{$str};
    animation: #{$str};
}
