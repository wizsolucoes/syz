/**
* Aplica a propriedade desejada para todos os prefixos dos browsers
*
* @param {string} $property - Propriedade que deseja aplicar os prefixos
* @param {string} $value - Valor da propriedade a ser aplicado o prefixo
*/

@mixin vendor-prefixes($property, $value) {
  #{$property}: $value;
  -webkit-#{$property}: $value;
  -moz-#{$property}: $value;
  -ms-#{$property}: $value;
  -o-#{$property}: $value;
}
/**
  * Define o alinhamento vertical centralizado para o elemento
  *
  * @param {string} $horizontal - Valor ja definido como true para fazer
  * o alinhamento horizontal do elemento.
  * @param {string} $vertical - Valor ja definido como true para fazer
  * o alinhamento vertical do elemento.
  * Ex alinhamento horizontal e vertical: @include centerer;
  * Ex alinhamento horizontal: @include centerer(true, false);
  * Ex alinhamento vertical: @include centerer(false, true);
  */

  @mixin centerer($horizontal: true, $vertical: true) {
    // position: absolute;
    @if ($horizontal and $vertical) {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    } @else if ($horizontal) {
        left: 50%;
        transform: translate(-50%, 0);
    } @else if ($vertical) {
        top: 50%;
        transform: translate(0, -50%);
    }
}

/**
  * Define as bordas arredondadas de um elemento
  *
  * @param {string} $radius - Texto com os valores da borda. Pode ser
  * o valor geral ou valores especificos para cada borda.
  */

  @mixin border-radius($radius) {
    @include vendor-prefixes(border-radius, $radius);
}

@mixin border-radius4(
    $top-start,
    $top-end: $top-start,
    $bottom-end: $top-start,
    $bottom-start: $top-end
) {
    @if $top-start ==
        $top-end and
        $top-start ==
        $bottom-end and
        $top-start ==
        $bottom-start
    {
        @include multi-dir() {
            border-radius: $top-start;
        }
    } @else {
        @include ltr() {
            border-top-left-radius: $top-start;
            border-top-right-radius: $top-end;
            border-bottom-right-radius: $bottom-end;
            border-bottom-left-radius: $bottom-start;
        }

        @include rtl() {
            border-top-left-radius: $top-end;
            border-top-right-radius: $top-start;
            border-bottom-right-radius: $bottom-start;
            border-bottom-left-radius: $bottom-end;
        }
    }
}

/**
  * Aplica efeito de transicao no elemento
  * @param {string} $args - Argumentos que ser√£o passados para o efeito de transicao
  */

  @mixin transition($args...) {
    @include vendor-prefixes(transition, $args);
}
